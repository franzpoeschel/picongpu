/* Copyright 2014-2019 Felix Schmitt, Axel Huebl, Franz Poeschel
 *
 * This file is part of PIConGPU.
 *
 * PIConGPU is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * PIConGPU is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with PIConGPU.
 * If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

#include "picongpu/simulationControl/MovingWindow.hpp"
#include "picongpu/simulation_defines.hpp"

#include <pmacc/math/Vector.hpp>
#include <pmacc/particles/frame_types.hpp>
#include <pmacc/types.hpp>

#include <openPMD/openPMD.hpp>

#include <iostream> // std::cerr
#include <limits>
#include <list>
#include <sstream>
#include <stdexcept> // throw std::runtime_error
#include <string>

namespace picongpu
{
namespace openPMD
{
    using namespace pmacc;


    namespace po = boost::program_options;


#define MESHES_PATH "fields"

    template< unsigned DIM, typename T >
    std::vector< T >
    asStandardVector( pmacc::math::Vector< T, DIM > const & );

    template< typename T >
    struct WithWindow
    {
        T m_data;
        ::openPMD::Offset m_offset;
        ::openPMD::Extent m_extent;

        // regular method and no constructor since we would
        // have to rely on template parameter deduction with constructors
        template< unsigned DIM >
        static WithWindow< T >
        init( T & data,
            pmacc::math::UInt64< DIM > offset,
            pmacc::math::UInt64< DIM > extent );
    };

    struct ThreadParams
    {
        uint32_t currentStep; /** current simulation step */


        std::unique_ptr<::openPMD::Series >
            openPMDSeries; /* is null iff there is no series currently open */

        /** current dump is a checkpoint */
        bool isCheckpoint;

        MPI_Comm communicator; /* MPI communicator for openPMD API */
        std::string
            compressionMethod; /* openPMD data transform compression method */
        std::string fileName;  /* Name of the openPMDSeries */

        pmacc::math::UInt64< simDim > fieldsSizeDims;
        pmacc::math::UInt64< simDim > fieldsGlobalSizeDims;
        pmacc::math::UInt64< simDim > fieldsOffsetDims;

        std::list< WithWindow<::openPMD::RecordComponent > >
            fieldRecords; /* fields in order of appearance */
        std::list< WithWindow<::openPMD::RecordComponent > >
            particleAttributes; /* particle attributes in order of appearance */
        std::list< WithWindow<::openPMD::RecordComponent > >
            speciesIndices; /* species index tables in order of appearance */

        GridLayout< simDim > gridLayout;
        MappingDesc * cellDescription;

        // float_X *fieldBfr;
        std::shared_ptr< float_X > fieldBuffer; /* temp. buffer for fields */

        Window window; /* window describing the volume to be dumped */

        DataSpace< simDim >
            localWindowToDomainOffset; /** offset from local moving
                                          window to local domain */

        ::openPMD::Series &
        openSeries( ::openPMD::AccessType at );

        void
        closeSeries();
    };

    /**
     * Writes simulation data to openPMD series.
     * Implements the ILightweightPlugin interface.
     */

    class openPMDWriter;

    /**
     * Wrapper for ::openPMD::resetDataset, set dataset parameters
     * @tparam DIM number of variable dimensions
     * @param recordComponent Location of the dataset within the openPMD Series
     * @param datatype Variable type
     * @param globalDimensions Dataset global dimensions
     * @param localDimensions Dataset local dimensions
     * @param offset Dataset local offset
     * @param compression Enable compression data transform
     * @param compressionMethod String denoting the data transform to use
     * @return The recordComponent, wrapped with the local offset and extent
     * since those are needed when calling RecordComponent::storeChunk
     */
    template< unsigned DIM >
    WithWindow<::openPMD::RecordComponent >
    prepareDataset( ::openPMD::RecordComponent & recordComponent,
        ::openPMD::Datatype datatype,
        pmacc::math::UInt64< DIM > const & globalDimensions,
        pmacc::math::UInt64< DIM > const & localDimensions,
        pmacc::math::UInt64< DIM > const & offset,
        bool compression,
        std::string const & compressionMethod );

    template< unsigned DIM >
    void
    pushDataset( ::openPMD::RecordComponent & recordComponent,
        ::openPMD::Datatype datatype,
        pmacc::math::UInt64< DIM > const & globalDimensions,
        pmacc::math::UInt64< DIM > const & localDimensions,
        pmacc::math::UInt64< DIM > const & offset,
        bool compression,
        std::string const & compressionMethod,
        std::list< WithWindow<::openPMD::RecordComponent > > & push_to );

} // namespace openPMD
} // namespace picongpu
