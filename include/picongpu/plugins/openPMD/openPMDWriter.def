/* Copyright 2014-2019 Felix Schmitt, Axel Huebl, Franz Poeschel
 *
 * This file is part of PIConGPU.
 *
 * PIConGPU is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * PIConGPU is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with PIConGPU.
 * If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

#include "picongpu/simulationControl/MovingWindow.hpp"
#include "picongpu/simulation_defines.hpp"

#include <pmacc/math/Vector.hpp>
#include <pmacc/particles/frame_types.hpp>
#include <pmacc/types.hpp>

#include <openPMD/openPMD.hpp>
#include <openPMD/benchmark/utils/DumpTimes.hpp>

#include <iostream> // std::cerr
#include <limits>
#include <list>
#include <sstream>
#include <stdexcept> // throw std::runtime_error
#include <string>

namespace picongpu
{
namespace openPMD
{
    using namespace pmacc;


    namespace po = boost::program_options;


#define MESHES_PATH "fields"

    template< unsigned DIM, typename T >
    std::vector< T >
    asStandardVector( pmacc::math::Vector< T, DIM > const & );

    enum class WriteSpeciesStrategy
    {
        ADIOS,
        HDF5
    };


    /**
     * Writes simulation data to openPMD series.
     * Implements the ILightweightPlugin interface.
     */

    class openPMDWriter;
    class Help;

    struct ThreadParams
    {
        uint32_t currentStep; /** current simulation step */


        std::unique_ptr<::openPMD::Series >
            openPMDSeries; /* is null iff there is no series currently open */

        /** current dump is a checkpoint */
        bool isCheckpoint;

        MPI_Comm communicator; /* MPI communicator for openPMD API */
        std::string
            compressionMethod; /* openPMD data transform compression method */
        std::string
            fileName; /* Name of the openPMDSeries, excluding the extension */
        std::string fileExtension; /* Extension of the file name */
        std::string fileInfix;

        std::string jsonConfig;

        WriteSpeciesStrategy strategy = WriteSpeciesStrategy::ADIOS;

        pmacc::math::UInt64< simDim > fieldsSizeDims;
        pmacc::math::UInt64< simDim > fieldsGlobalSizeDims;
        pmacc::math::UInt64< simDim > fieldsOffsetDims;

        GridLayout< simDim > gridLayout;
        MappingDesc * cellDescription;

        // float_X *fieldBfr;
        std::shared_ptr< float_X > fieldBuffer; /* temp. buffer for fields */

        Window window; /* window describing the volume to be dumped */

        DataSpace< simDim >
            localWindowToDomainOffset; /** offset from local moving
                                          window to local domain */

        ::openPMD::DumpTimes<> m_dumpTimes{
            [](){
                static GridController<simDim>& gc =
                    Environment<simDim>::get().GridController();
                static std::string dumpFile =
                    "PIC_times_" + std::to_string( gc.getGlobalRank( ) )
                    + ".txt";
                return dumpFile;
            }()
        };

        ::openPMD::Series &
        openSeries( ::openPMD::AccessType at );

        void
        closeSeries();

        void
        initFromConfig(
            Help &,
            size_t id,
            std::string const & file,
            std::string const & dir );

        inline bool
        isADIOS1();

        /**
         * Wrapper for ::openPMD::resetDataset, set dataset parameters
         * @tparam DIM number of variable dimensions
         * @param recordComponent Location of the dataset within the openPMD
         * Series
         * @param datatype Variable type
         * @param globalDimensions Dataset global dimensions
         * @param compression Enable compression data transform
         * @param compressionMethod String denoting the data transform to use
         * @return The input recordComponent
         */
        template< unsigned DIM >
        ::openPMD::RecordComponent &
        initDataset(
            ::openPMD::RecordComponent & recordComponent,
            ::openPMD::Datatype datatype,
            pmacc::math::UInt64< DIM > const & globalDimensions,
            bool compression,
            std::string const & compressionMethod );
    };
} // namespace openPMD
} // namespace picongpu
