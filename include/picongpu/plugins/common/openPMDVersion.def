/* Copyright 2020-2021 Franz Poeschel
 *
 * This file is part of PIConGPU.
 *
 * PIConGPU is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * PIConGPU is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with PIConGPU.
 * If not, see <http://www.gnu.org/licenses/>.
 */
#pragma once

#include "openPMD/openPMD.hpp"

#include <utility> // std::declval

#if OPENPMDAPI_VERSION_GE(0, 13, 0)
// Streaming API is available, use it
#    define WRITE_ITERATIONS writeIterations()
#else
// Not available, don't use it
#    define WRITE_ITERATIONS iterations
#endif

namespace picongpu
{
    namespace openPMD
    {
        /*
         * Do some SFINAE tricks to detect whether the openPMD API has
         * dataset-specific configuration or not.
         */
        namespace detail
        {
            // As std::void_t in C++17.
            template<typename>
            using void_t = void;

            template<typename = ::openPMD::Dataset, typename = void>
            struct SetDatasetOptions
            {
                static void run(::openPMD::Dataset const&, std::string const& options)
                {
                    if(options != "{}")
                    {
                        std::cerr
                            << "[openPMD plugin] Setting dataset-specific JSON options requires openPMD API 0.13.0 "
                               "or later."
                            << std::endl;
                    }
                }
            };

            template<typename Dataset>
            struct SetDatasetOptions<Dataset, void_t<decltype(Dataset::options)>>
            {
                static void run(Dataset& ds, std::string options)
                {
                    ds.options = std::move(options);
                }
            };

            template<typename ValueType, typename = ::openPMD::RecordComponent, typename = void>
            struct openPMDSpan
            {
                std::shared_ptr<ValueType> m_buffer;
                ValueType* currentBuffer() const
                {
                    return m_buffer.get();
                }

                template<typename Functor>
                openPMDSpan(
                    ::openPMD::RecordComponent& rc,
                    ::openPMD::Offset offset,
                    ::openPMD::Extent extent,
                    Functor&& createBaseBuffer)
                {
                    using extent_t = ::openPMD::Extent::value_type;
                    extent_t scalarExtent = 1;
                    for(auto val : extent)
                    {
                        scalarExtent *= val;
                    }
                    m_buffer = std::forward<Functor>(createBaseBuffer)(scalarExtent);
                    rc.storeChunk(m_buffer, std::move(offset), std::move(extent));
                }
            };

            template<typename ValueType, typename RecordComponent>
            struct openPMDSpan<
                ValueType,
                RecordComponent,
                // check for existence of span-based storeChunk API
                void_t<decltype(std::declval<RecordComponent>().template storeChunk<ValueType>(
                    std::declval<::openPMD::Offset>(),
                    std::declval<::openPMD::Extent>()))>>
            {
                // We cannot use ::openPMD::DynamicMemoryView directly since that is non-dependent lookup
                // so, use a dependent type
                using DynamicMemoryView = decltype(std::declval<RecordComponent>().template storeChunk<ValueType>(
                    std::declval<::openPMD::Offset>(),
                    std::declval<::openPMD::Extent>()));
                DynamicMemoryView m_buffer;
                ValueType* currentBuffer()
                {
                    return m_buffer.currentBuffer().data();
                }

                template<typename Functor>
                openPMDSpan(
                    ::openPMD::RecordComponent& rc,
                    ::openPMD::Offset offset,
                    ::openPMD::Extent extent,
                    Functor&& createBaseBuffer)
                    : m_buffer{rc.storeChunk<ValueType>(
                        std::move(offset),
                        std::move(extent),
                        std::forward<Functor>(createBaseBuffer))}
                {
                }
            };
        } // namespace detail

        void setDatasetOptions(::openPMD::Dataset& ds, std::string options)
        {
            detail::SetDatasetOptions<>::run(ds, std::move(options));
        }

        template<typename ValueType, typename Functor>
        auto storeChunkSpan(
            ::openPMD::RecordComponent& rc,
            ::openPMD::Offset offset,
            ::openPMD::Extent extent,
            Functor&& createBaseBuffer) -> detail::openPMDSpan<ValueType>
        {
            return detail::openPMDSpan<ValueType>(
                rc,
                std::move(offset),
                std::move(extent),
                std::forward<Functor>(createBaseBuffer));
        }
    } // namespace openPMD
} // namespace picongpu
